name: build-and-test

on:
  push:
    branches: ['ijjk/update-ci-workflow']

concurrency:
  group: ${{ github.ref }}-build-and-test
  cancel-in-progress: true

env:
  NAPI_CLI_VERSION: 2.14.7
  TURBO_VERSION: 1.9.6
  RUST_TOOLCHAIN: nightly-2023-03-09
  PNPM_VERSION: 7.24.3
  NODE_MAINTENANCE_VERSION: 16
  NODE_LTS_VERSION: 18
  TEST_CONCURRENCY: 8
  # TODO: remove after testing
  # NEXT_TEST_CONTINUE_ON_ERROR: 'true'

  TURBO_TEAM: 'vercel'
  TURBO_REMOTE_ONLY: 'true'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  NEXT_TELEMETRY_DISABLED: 1
  # we build a dev binary for use in CI so skip downloading
  # canary next-swc binaries in the monorepo
  NEXT_SKIP_NATIVE_POSTINSTALL: 1
  TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
  NEXT_TEST_JOB: 1

jobs:
  build:
    name: build
    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    secrets: inherit

  lint:
    name: lint
    needs: ['build']

    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      afterBuild: pnpm lint-no-typescript && pnpm check-examples
    secrets: inherit

  check-types-precompiled:
    name: types and precompiled
    needs: ['build']

    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      afterBuild: pnpm types-and-precompiled
      skipForDocsOnly: 'yes'
    secrets: inherit

  rust-check:
    name: rust check
    needs: ['build']

    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      skipForDocsOnly: 'yes'
      skipInstallBuild: 'yes'
      afterBuild: turbo run rust-check
    secrets: inherit

  test-cargo-unit:
    name: test cargo unit
    needs: ['build']
    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      skipForDocsOnly: 'yes'
      skipInstallBuild: 'yes'
      afterBuild: turbo run test-cargo-unit
    secrets: inherit

  # test-cargo-integration:
  #   name: test cargo integration
  #   needs: ['build']
  #   uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
  #   with:
  #     needsNextest: 'yes'
  #     skipForDocsOnly: 'yes'
  #     afterBuild: CARGO_PROFILE_RELEASE_LTO=false turbo run test-cargo-integration
  #   secrets: inherit

  test-turbopack-integration:
    name: test turbopack integration
    needs: ['build']
    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      skipForDocsOnly: 'yes'
      afterBuild: RUST_BACKTRACE=0 NEXT_EXTERNAL_TESTS_FILTERS="$(pwd)/packages/next-swc/crates/next-dev-tests/tests-manifest.js" __INTERNAL_NEXT_DEV_TEST_TURBO_DEV=TRUE __INTERNAL_CUSTOM_TURBOPACK_BINDINGS="$(pwd)/packages/next-swc/native/next-swc.linux-x64-gnu.node" __INTERNAL_NEXT_DEV_TEST_TURBO_GLOB_MATCH="*" NEXT_E2E_TEST_TIMEOUT=240000 NEXT_TEST_MODE=dev node run-tests.js --type development --timings -c 1
    secrets: inherit

  test-next-swc-wasm:
    name: test next-swc wasm
    needs: ['build']

    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      skipForDocsOnly: 'yes'
      afterBuild: rustup target add wasm32-unknown-unknown && curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh && turbo run build-wasm -- --target nodejs --features tracing/release_max_level_info && mv packages/next-swc/crates/wasm/pkg packages/next-swc/crates/wasm/pkg-nodejs && NEXT_TEST_MODE=start TEST_WASM=true node run-tests.js test/integration/production/test/index.test.js test/e2e/streaming-ssr/index.test.ts
    secrets: inherit

  test-dev:
    name: test dev
    needs: ['build']
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3]

    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      skipForDocsOnly: 'yes'
      afterBuild: NEXT_TEST_MODE=dev node run-tests.js --timings -g ${{ matrix.group }}/3 -c ${TEST_CONCURRENCY} --test-pattern '^(development|e2e|unit)/.*\.test\.(js|jsx|ts|tsx)$'
    secrets: inherit

  test-prod:
    name: test prod
    needs: ['build']
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3]

    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      skipForDocsOnly: 'yes'
      afterBuild: NEXT_TEST_MODE=start node run-tests.js --timings -g ${{ matrix.group }}/3 -c ${TEST_CONCURRENCY} --test-pattern '^(production|e2e)/.*\.test\.(js|jsx|ts|tsx)$'
    secrets: inherit

  test-integration:
    name: test integration
    needs: ['build']
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3, 4, 5, 6]

    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      skipForDocsOnly: 'yes'
      afterBuild: node run-tests.js --timings -g ${{ matrix.group }}/6 -c ${TEST_CONCURRENCY} --test-pattern '^(integration)/.*\.test\.(js|jsx|ts|tsx)$'
    secrets: inherit

  test-firefox-safari:
    name: test firefox and safari
    needs: ['build']

    uses: vercel/next.js/.github/workflows/build_reusable.yml@ijjk/update-ci-workflow
    with:
      skipForDocsOnly: 'yes'
      afterBuild: pnpm playwright install && BROWSER_NAME=firefox node run-tests.js test/integration/production/test/index.test.js && BROWSER_NAME=safari NEXT_TEST_MODE=start node run-tests.js -c 1 test/integration/production/test/index.test.js test/e2e/basepath.test.ts && BROWSER_NAME=safari DEVICE_NAME='iPhone XR' node run-tests.js -c 1 test/production/prerender-prefetch/index.test.ts
    secrets: inherit

  tests-pass:
    needs: [
        'build',
        'lint',
        'check-types-precompiled',
        'test-dev',
        'test-prod',
        'test-integration',
        'rust-check',
        'test-cargo-unit',
        # 'test-cargo-integration',
        'test-next-swc-wasm',
        'test-turbopack-integration',
      ]
    runs-on: [self-hosted, linux, x64]
    name: thank you, next
    steps:
      - run: echo 'success'
